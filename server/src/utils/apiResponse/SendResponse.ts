import { Response } from "express";
export enum ServerStatus {
    OK = 'OK',
    DATABASE_ERROR = 'DATABASE_ERROR',
    VALIDATION_ERROR = 'VALIDATION_ERROR',
    AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR',
    UNAUTHORIZED_ACCESS = 'UNAUTHORIZED_ACCESS',
    FORBIDDEN_ERROR = 'FORBIDDEN_ERROR',
    NOT_FOUND_ERROR = 'NOT_FOUND_ERROR',
    INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR',
    BAD_REQUEST_ERROR = 'BAD_REQUEST_ERROR',
    DUPLICATE_RESOURCE_ERROR = 'DUPLICATE_RESOURCE_ERROR',
    SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE',
    TIMEOUT_ERROR = 'TIMEOUT_ERROR',
    NETWORK_ERROR = 'NETWORK_ERROR',
    CONFIGURATION_ERROR = 'CONFIGURATION_ERROR',
    THIRD_PARTY_ERROR = 'THIRD_PARTY_ERROR',
    INVALID_OPERATION = 'INVALID_OPERATION',
    UNSUPPORTED_MEDIA_TYPE = 'UNSUPPORTED_MEDIA_TYPE',
    UNPROCESSABLE_ENTITY = 'UNPROCESSABLE_ENTITY',
    TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS',
    GATEWAY_TIMEOUT = 'GATEWAY_TIMEOUT',
    NOT_IMPLEMENTED = 'NOT_IMPLEMENTED',
    INSUFFICIENT_STORAGE = 'INSUFFICIENT_STORAGE',
    VERSION_CONFLICT = 'VERSION_CONFLICT',
    REQUEST_ENTITY_TOO_LARGE = 'REQUEST_ENTITY_TOO_LARGE',
    PRECONDITION_FAILED = 'PRECONDITION_FAILED',
    PRECONDITION_REQUIRED = 'PRECONDITION_REQUIRED',
    LOOP_DETECTED = 'LOOP_DETECTED',
    NOT_ACCEPTABLE = 'NOT_ACCEPTABLE',
    PROXY_AUTHENTICATION_REQUIRED = 'PROXY_AUTHENTICATION_REQUIRED',
    CONFLICT = 'CONFLICT',
    LENGTH_REQUIRED = 'LENGTH_REQUIRED',
    PAYLOAD_TOO_LARGE = 'PAYLOAD_TOO_LARGE',
    URI_TOO_LONG = 'URI_TOO_LONG',
    UNSUPPORTED_URI_SCHEME = 'UNSUPPORTED_URI_SCHEME',
    VARIANT_ALSO_NEGOTIATES = 'VARIANT_ALSO_NEGOTIATES',
    MISDIRECTED_REQUEST = 'MISDIRECTED_REQUEST',
    TOO_EARLY = 'TOO_EARLY',
    UNAVAILABLE_FOR_LEGAL_REASONS = 'UNAVAILABLE_FOR_LEGAL_REASONS',
    LOCKED = 'LOCKED',
    FAILED_DEPENDENCY = 'FAILED_DEPENDENCY',
    UPGRADE_REQUIRED = 'UPGRADE_REQUIRED',
    PRECONDITION_FAILED_NONUPGRADE = 'PRECONDITION_FAILED_NONUPGRADE',
    RETRY_WITH = 'RETRY_WITH',
    UNPROCESSABLE_ENTITY_LOCKED = 'UNPROCESSABLE_ENTITY_LOCKED',
    TOO_MANY_REQUESTS_RETRY_LATER = 'TOO_MANY_REQUESTS_RETRY_LATER',
    REQUEST_HEADER_FIELDS_TOO_LARGE = 'REQUEST_HEADER_FIELDS_TOO_LARGE',
    UNAVAILABLE_FOR_LEGAL_REASONS_LOCKED = 'UNAVAILABLE_FOR_LEGAL_REASONS_LOCKED',
}

export enum HttpStatusCode {
    OK = 200,
    CREATED = 201,
    NO_CONTENT = 204,
    BAD_REQUEST = 400,
    UNAUTHORIZED = 401,
    FORBIDDEN = 403,
    NOT_FOUND = 404,
    METHOD_NOT_ALLOWED = 405,
    INTERNAL_SERVER_ERROR = 500,
}

export const sendResponse = (res: Response, { data, status = 20 }: { data: any, status?: number }) => {
    return res.status(status).send(data);
}